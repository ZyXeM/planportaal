<?php
/**
 * SortingModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API introduction
 *
 * ### URL for API requests  `https://api.paazl.com/`  ### Optional keys  Some of the optional key-value pairs have a default value. Where this is the case, the default values will be indicated.  You can leave out optional keys from requests. If you leave out an optional key, it will not be included in the response concerned.  ### Paazl authentication  Paazl uses a three-legged OAuth 2.0 authentication process in which the API Secret (private key) is only known to the webshop. Webshop customers never have access to that key. However, they do have access the API Key (public key). See the online help article titled \"Authentication & Authorization\" for an explanation of how to generate these keys in the Paazl web app.  In Swagger, you authorize a call using the Authorize button. After clicking this button, you enter a string with either the format \"Bearer api_key\" or the format \"Bearer api_key:api_secret\" depending on the endpoint method concerned.  #### Calls requiring \"Bearer api_key\":  &#8226; POST shippingOptions  &#8226; POST pickupLocations  &#8226; POST checkout  Example:`\"Bearer sI3flYhflh\"`   #### Calls requiring \"Bearer api_key:api_secret\":  &#8226; POST token  &#8226; GET checkout  &#8226; POST order  &#8226; PUT order  &#8226; PATCH order  &#8226; DELETE order  Example:`\"Bearer sI3flYhflh:sdHlHkyunLKsoI94luilIlndD\"`
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SortingModel Class Doc Comment
 *
 * @category Class
 * @description Contains elements that tell Paazl how to sort the shipping options it sends back.  Examples:  &#x60;sortingModel:{orderBy:\&quot;DATE\&quot;, sortOrder:\&quot;DESC\&quot;}&#x60;  &#x60;sortingModel:{orderBy:\&quot;CARRIER\&quot;, distributor:\&quot;DHL Deutschland\&quot;}&#x60;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SortingModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SortingModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'distributor' => 'string',
        'order_by' => 'string',
        'sort_order' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'distributor' => null,
        'order_by' => null,
        'sort_order' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'distributor' => 'distributor',
        'order_by' => 'orderBy',
        'sort_order' => 'sortOrder'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'distributor' => 'setDistributor',
        'order_by' => 'setOrderBy',
        'sort_order' => 'setSortOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'distributor' => 'getDistributor',
        'order_by' => 'getOrderBy',
        'sort_order' => 'getSortOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DISTRIBUTOR_SELEKTVRACHT = 'SELEKTVRACHT';
    const DISTRIBUTOR_TNT = 'TNT';
    const DISTRIBUTOR_TNT_EXPRESS = 'TNT_EXPRESS';
    const DISTRIBUTOR_DPD = 'DPD';
    const DISTRIBUTOR_FEDEX = 'FEDEX';
    const DISTRIBUTOR_DYNALOGIC = 'DYNALOGIC';
    const DISTRIBUTOR_KIALA = 'KIALA';
    const DISTRIBUTOR_DHL_EXPRESS = 'DHL_EXPRESS';
    const DISTRIBUTOR_DHL_DE = 'DHL_DE';
    const DISTRIBUTOR_UPS = 'UPS';
    const DISTRIBUTOR_BPOST = 'BPOST';
    const DISTRIBUTOR_GLS = 'GLS';
    const DISTRIBUTOR_TSN = 'TSN';
    const DISTRIBUTOR_MONDIALRELAY = 'MONDIALRELAY';
    const DISTRIBUTOR_B2_C_EUROPE = 'B2C_EUROPE';
    const DISTRIBUTOR_B2_C_EUROPE_LAB = 'B2C_EUROPE_LAB';
    const DISTRIBUTOR_DE_BUREN = 'DE_BUREN';
    const DISTRIBUTOR_CARGOOFFICE = 'CARGOOFFICE';
    const DISTRIBUTOR_VAN_SPREUWEL = 'VAN_SPREUWEL';
    const DISTRIBUTOR_PACKS = 'PACKS';
    const DISTRIBUTOR_COLISSIMO = 'COLISSIMO';
    const DISTRIBUTOR_BRT = 'BRT';
    const DISTRIBUTOR_CORREOS = 'CORREOS';
    const DISTRIBUTOR_TRANSMISSION = 'TRANSMISSION';
    const DISTRIBUTOR_HERMES = 'HERMES';
    const DISTRIBUTOR_FADELLO = 'FADELLO';
    const DISTRIBUTOR_AUS_POST = 'AUS_POST';
    const DISTRIBUTOR_SAGAWA = 'SAGAWA';
    const DISTRIBUTOR_ASENDIA = 'ASENDIA';
    const DISTRIBUTOR_MENDRIX = 'MENDRIX';
    const DISTRIBUTOR_FEDEX_ZA = 'FEDEX_ZA';
    const DISTRIBUTOR_RJP = 'RJP';
    const DISTRIBUTOR_YUNDA_EXPRESS = 'YUNDA_EXPRESS';
    const DISTRIBUTOR_HERMES_UK = 'HERMES_UK';
    const DISTRIBUTOR_POSTNORD = 'POSTNORD';
    const DISTRIBUTOR_BLANK = 'BLANK';
    const DISTRIBUTOR_GENERIC = 'GENERIC';
    const ORDER_BY_PRICE = 'PRICE';
    const ORDER_BY_DATE = 'DATE';
    const ORDER_BY_CARRIER = 'CARRIER';
    const SORT_ORDER_ASC = 'ASC';
    const SORT_ORDER_DESC = 'DESC';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDistributorAllowableValues()
    {
        return [
            self::DISTRIBUTOR_SELEKTVRACHT,
            self::DISTRIBUTOR_TNT,
            self::DISTRIBUTOR_TNT_EXPRESS,
            self::DISTRIBUTOR_DPD,
            self::DISTRIBUTOR_FEDEX,
            self::DISTRIBUTOR_DYNALOGIC,
            self::DISTRIBUTOR_KIALA,
            self::DISTRIBUTOR_DHL_EXPRESS,
            self::DISTRIBUTOR_DHL_DE,
            self::DISTRIBUTOR_UPS,
            self::DISTRIBUTOR_BPOST,
            self::DISTRIBUTOR_GLS,
            self::DISTRIBUTOR_TSN,
            self::DISTRIBUTOR_MONDIALRELAY,
            self::DISTRIBUTOR_B2_C_EUROPE,
            self::DISTRIBUTOR_B2_C_EUROPE_LAB,
            self::DISTRIBUTOR_DE_BUREN,
            self::DISTRIBUTOR_CARGOOFFICE,
            self::DISTRIBUTOR_VAN_SPREUWEL,
            self::DISTRIBUTOR_PACKS,
            self::DISTRIBUTOR_COLISSIMO,
            self::DISTRIBUTOR_BRT,
            self::DISTRIBUTOR_CORREOS,
            self::DISTRIBUTOR_TRANSMISSION,
            self::DISTRIBUTOR_HERMES,
            self::DISTRIBUTOR_FADELLO,
            self::DISTRIBUTOR_AUS_POST,
            self::DISTRIBUTOR_SAGAWA,
            self::DISTRIBUTOR_ASENDIA,
            self::DISTRIBUTOR_MENDRIX,
            self::DISTRIBUTOR_FEDEX_ZA,
            self::DISTRIBUTOR_RJP,
            self::DISTRIBUTOR_YUNDA_EXPRESS,
            self::DISTRIBUTOR_HERMES_UK,
            self::DISTRIBUTOR_POSTNORD,
            self::DISTRIBUTOR_BLANK,
            self::DISTRIBUTOR_GENERIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderByAllowableValues()
    {
        return [
            self::ORDER_BY_PRICE,
            self::ORDER_BY_DATE,
            self::ORDER_BY_CARRIER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSortOrderAllowableValues()
    {
        return [
            self::SORT_ORDER_ASC,
            self::SORT_ORDER_DESC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['distributor'] = isset($data['distributor']) ? $data['distributor'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDistributorAllowableValues();
        if (!is_null($this->container['distributor']) && !in_array($this->container['distributor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'distributor', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderByAllowableValues();
        if (!is_null($this->container['order_by']) && !in_array($this->container['order_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_by', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSortOrderAllowableValues();
        if (!is_null($this->container['sort_order']) && !in_array($this->container['sort_order'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sort_order', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets distributor
     *
     * @return string|null
     */
    public function getDistributor()
    {
        return $this->container['distributor'];
    }

    /**
     * Sets distributor
     *
     * @param string|null $distributor Indicates which carrier's shipping options should appear at the top of the shipping options list.   You will find carrier codes available to you in your web app account under *Settings>Account>Overview of shipping options*.  The shipping options displayed following those of distributor will be displayed in order of ascending price.  **Note!** if `orderBy` has the value `\"CARRIER\"`, this element is required; if `orderBy` has the value `\"PRICE\"` or `\"DATE\"`, this element will be ignored.  Exmaple: `distributor:\"SELEKTVRACHT\"`
     *
     * @return $this
     */
    public function setDistributor($distributor)
    {
        $allowedValues = $this->getDistributorAllowableValues();
        if (!is_null($distributor) && !in_array($distributor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'distributor', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['distributor'] = $distributor;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return string|null
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param string|null $order_by Indicates the field by which to sort the shipping options returned.  The default value is `\"PRICE\"`  Example: `orderBy:\"DATE\"`
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $allowedValues = $this->getOrderByAllowableValues();
        if (!is_null($order_by) && !in_array($order_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return string|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param string|null $sort_order Indicates the order in which shipping options should be sorted.  The default value is `\"ASC\"`  **Note!** If `orderBy` has the value \"CARRIER\", this element will be ignored.  Example: `sortOrder:\"DESC\"`
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $allowedValues = $this->getSortOrderAllowableValues();
        if (!is_null($sort_order) && !in_array($sort_order, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sort_order', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


